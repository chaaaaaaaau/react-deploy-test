{"version":3,"sources":["images/th11.png","images/th10.png","images/th7.png","images/th6.png","images/th5.png","images/th4.png","images/th3.png","images/th2.png","images/th1.png","images/hc.png","images/hc2.png","images/hc3.png","images/hc4.png","images/he.png","images/ed2.png","images/ed3.png","images/ed5.png","images/edth.png","logo.svg","Header.js","MemeGenerator.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","src","alt","MemeGenerator","state","topText","bottomText","randomImg","thomas1","allMemeImgs","thomas2","thomas3","thomas4","thomas5","thomas6","thomas7","thomas8","thomas9","henry1","henry2","henry3","henry4","henry5","edgar1","edgar2","edgar3","edgar4","handleChange","bind","handleSubmit","event","target","name","value","this","setState","preventDefault","randNum","Math","floor","random","length","randMemeImg","className","onSubmit","type","placeholder","onChange","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yGAAAA,EAAOC,QAAU,IAA0B,kC,qBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,yECA3CD,EAAOC,QAAU,IAA0B,kC,4GCc5BC,MAZf,WACE,OACE,gCACE,yBACEC,IAAI,iEACJC,IAAI,aAEN,iD,2VCoHSC,E,kDAnGb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,QAAS,GACTC,WAAY,GAKZC,UAAWC,IACXC,YAAa,CACXD,IACAE,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,MAGJ,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAhCR,E,yDAgDDE,GAAQ,IAAD,EACMA,EAAMC,OAAtBC,EADU,EACVA,KAAMC,EADI,EACJA,MACdC,KAAKC,SAAL,eACGH,EAAOC,M,mCAICH,GACXA,EAAMM,iBAEN,IAAMC,EAAUC,KAAKC,MAAMD,KAAKE,SAAWN,KAAK9B,MAAMK,YAAYgC,QAG5DC,EAAcR,KAAK9B,MAAMK,YAAY4B,GAE3CH,KAAKC,SAAS,CACZ5B,UAAWmC,M,+BAMb,OACE,6BACE,0BAAMC,UAAU,YAAYC,SAAUV,KAAKL,cACzC,2BACEgB,KAAK,OACLb,KAAK,UACLc,YAAY,WACZb,MAAOC,KAAK9B,MAAMC,QAClB0C,SAAUb,KAAKP,eAEjB,2BACEkB,KAAK,OACLb,KAAK,aACLc,YAAY,cACZb,MAAOC,KAAK9B,MAAME,WAClByC,SAAUb,KAAKP,eAEjB,wCAEF,yBAAKgB,UAAU,QACb,yBAAK1C,IAAKiC,KAAK9B,MAAMG,UAAWL,IAAI,KACpC,wBAAIyC,UAAU,OAAOT,KAAK9B,MAAMC,SAChC,wBAAIsC,UAAU,UAAUT,KAAK9B,MAAME,kB,GA/FjB0C,IAAMC,WCJnBC,MAbf,WAKE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCFcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OACP,kBAAC,EAAD,MAMAC,SAASC,eAAe,SDkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d51fd3f7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/th11.19fbcfb1.png\";","module.exports = __webpack_public_path__ + \"static/media/th10.4565d287.png\";","module.exports = __webpack_public_path__ + \"static/media/th7.5548a8a7.png\";","module.exports = __webpack_public_path__ + \"static/media/th6.419a01d2.png\";","module.exports = __webpack_public_path__ + \"static/media/th5.8490fd32.png\";","module.exports = __webpack_public_path__ + \"static/media/th4.2f867280.png\";","module.exports = __webpack_public_path__ + \"static/media/th3.68bfbf11.png\";","module.exports = __webpack_public_path__ + \"static/media/th2.8d26c983.png\";","module.exports = __webpack_public_path__ + \"static/media/th1.88e5d2b3.png\";","module.exports = __webpack_public_path__ + \"static/media/hc.43d7523f.png\";","module.exports = __webpack_public_path__ + \"static/media/hc2.06672ec8.png\";","module.exports = __webpack_public_path__ + \"static/media/hc3.3112df23.png\";","module.exports = __webpack_public_path__ + \"static/media/hc4.7868811d.png\";","module.exports = __webpack_public_path__ + \"static/media/he.aef14973.png\";","module.exports = __webpack_public_path__ + \"static/media/ed2.1d87d658.png\";","module.exports = __webpack_public_path__ + \"static/media/ed3.0f67e2b3.png\";","module.exports = __webpack_public_path__ + \"static/media/ed5.1e9a0d04.png\";","module.exports = __webpack_public_path__ + \"static/media/edth.d338aaec.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <header>\r\n      <img\r\n        src=\"http://www.pngall.com/wp-content/uploads/2016/05/Trollface.png\"\r\n        alt=\"Problem?\"\r\n      />\r\n      <p>Thomas Generator</p>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nimport thomas1 from \"./images/th11.png\";\r\nimport thomas2 from \"./images/th10.png\";\r\nimport thomas3 from \"./images/th7.png\";\r\nimport thomas4 from \"./images/th6.png\";\r\nimport thomas5 from \"./images/th5.png\";\r\nimport thomas6 from \"./images/th4.png\";\r\nimport thomas7 from \"./images/th3.png\";\r\nimport thomas8 from \"./images/th2.png\";\r\nimport thomas9 from \"./images/th1.png\";\r\n\r\nimport henry1 from \"./images/hc.png\";\r\nimport henry2 from \"./images/hc2.png\";\r\nimport henry3 from \"./images/hc3.png\";\r\nimport henry4 from \"./images/hc4.png\";\r\nimport henry5 from \"./images/he.png\";\r\n\r\nimport edgar1 from \"./images/ed2.png\";\r\nimport edgar2 from \"./images/ed3.png\";\r\nimport edgar3 from \"./images/ed5.png\";\r\nimport edgar4 from \"./images/edth.png\";\r\n\r\nclass MemeGenerator extends React.Component {\r\n  //Initialization Constructor\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      topText: \"\",\r\n      bottomText: \"\",\r\n      /*\r\n      randomImg: \"http://i.imgflip.com/1bij.jpg\",\r\n      allMemeImgs: [],\r\n      */\r\n      randomImg: thomas1,\r\n      allMemeImgs: [\r\n        thomas1,\r\n        thomas2,\r\n        thomas3,\r\n        thomas4,\r\n        thomas5,\r\n        thomas6,\r\n        thomas7,\r\n        thomas8,\r\n        thomas9,\r\n        henry1,\r\n        henry2,\r\n        henry3,\r\n        henry4,\r\n        henry5,\r\n        edgar1,\r\n        edgar2,\r\n        edgar3,\r\n        edgar4,\r\n      ],\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  //Life-cycle Method\r\n  /*\r\n  componentDidMount() {\r\n    fetch(\"https://api.imgflip.com/get_memes\")\r\n      .then((response) => response.json())\r\n      .then((response) => {\r\n        //Actual Response Useful for programming\r\n        const { memes } = response.data;\r\n        this.setState({ allMemeImgs: memes});\r\n      });\r\n  }*/\r\n\r\n  //Event Handler\r\n  handleChange(event) {\r\n    const { name, value } = event.target;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    // console.log(this.state.randomImg);\r\n    const randNum = Math.floor(Math.random() * this.state.allMemeImgs.length);\r\n    //const randMemeImg = this.state.allMemeImgs[randNum].url;\r\n    // console.log(this.state.allMemeImgs.length);\r\n    const randMemeImg = this.state.allMemeImgs[randNum];\r\n    // console.log(randMemeImg);\r\n    this.setState({\r\n      randomImg: randMemeImg,\r\n    });\r\n  }\r\n\r\n  //Display\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form className=\"meme-form\" onSubmit={this.handleSubmit}>\r\n          <input\r\n            type=\"text\"\r\n            name=\"topText\"\r\n            placeholder=\"Top Text\"\r\n            value={this.state.topText}\r\n            onChange={this.handleChange}\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            name=\"bottomText\"\r\n            placeholder=\"Bottom Text\"\r\n            value={this.state.bottomText}\r\n            onChange={this.handleChange}\r\n          />\r\n          <button>Gen</button>\r\n        </form>\r\n        <div className=\"meme\">\r\n          <img src={this.state.randomImg} alt=\"\" />\r\n          <h2 className=\"top\">{this.state.topText}</h2>\r\n          <h2 className=\"bottom\">{this.state.bottomText}</h2>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MemeGenerator;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Header from \"./Header\";\nimport MemeGenerator from \"./MemeGenerator\";\n\nfunction App() {\n  // {} in JSX is executed as JS\n  // todositem = Name (xxxxx) Defined in Mytodoitem.js (props.xxxxx.variable), refer to an object\n  // todosData = Array List imported\n\n  return (\n    <div>\n      <Header />\n      <MemeGenerator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"; // enable JSX\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// What do I want to render, where do I want to render it\n// JSX (Html in JS)\n// Cannot Include 2 JSX elements separately -> wrap them into one enclosed tag\n\nReactDOM.render(\n  <App />,\n  /*\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  */\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}